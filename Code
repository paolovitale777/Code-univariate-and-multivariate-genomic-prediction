### Univariate GBLUP using 10 cycles of 5-fold cross-validation ###
#Script example for one trait grain yield in high nitrogen and well-watered (HNW) (named X1)

#required packages
library(BGLR)
library(sommer)


#load the Markers and Phenotypes
Markers <- as.matrix(read.table(file="INPUT_SNP_0.05_MAF_IMPUTED.txt"), header=F)
head(Markers)
Pheno <-as.matrix(read.table(file ="ALL_PHENO_FINAL.txt", header=TRUE))
head(Pheno)

#check the dimensions of the matrices
dim(Markers)
dim(Pheno)

#rename elements
DT <- Pheno
GT <- Markers
colnames(DT) <- paste0("X",1:ncol(DT))
DT <- as.data.frame(DT);DT$id <- as.factor(rownames(DT))




colnames(DT) <- paste0("X",1:ncol(DT))
DT <- as.data.frame(DT);DT$id <- as.factor(rownames(DT))
n<-nrow(DT)
p<-ncol(DT)
rownames(GT) <- rownames(DT)

#build the G matrix
X <- scale(GT, scale = T) #scale the markers
G <- tcrossprod(X)/ncol(X) # perform the crossproduct of the scaled markers


# create the empty matrix
cor_matrix <- matrix(NA, nrow = 10, ncol = 5)  # Assuming you have 5 folds and you want to repeat the cross-validation for 10 times (you can change this)

#stating the loop
for(p in 1:10){
  
  PT_ls_List <- CV.KFold(DT, DataSetID='id', K=5)$CrossValidation_list
  
  for(i in 1:5){
    
    tst = as.character(PT_ls_List[[i]])
    y.tnr<-DT
    y.tnr[tst,"X1"]<-NA
    
    
    ans <- mmer(X1~1,
                random=~vsr(id,Gu=G),
                rcov=~units,
                data=y.tnr,verbose = FALSE) # kinship based
    ans$U$`u:id`$X1 <- as.data.frame(ans$U$`u:id`$X1)
    rownames(ans$U$`u:id`$X1) <- gsub("id","",rownames(ans$U$`u:id`$X1))
    cor_matrix[p,i]<-cor(ans$U$`u:id`$X1[tst,],DT[tst,"X1"], use="complete")
  }
}
summary(cor_matrix)








### Multivariate GBLUP using 10 cycles of 5-fold cross-validation (CV1) ###  
# The script is applicable for both predicting Grain Yield in HNW (named X1) using grain yield in LNW (named X2) (and vice-versa) and for predicting grain yield using the five best-correlate traits 

# create the empty matrix
cor_matrix <- matrix(NA, nrow = 10, ncol = 5)  # Assuming you have 5 folds and you want to repeat the cross-validation for 10 times (you can change this)

#stating the loop
for(p in 1:10){
  
  PT_ls_List <- CV.KFold(DT, DataSetID='id', K=5)$CrossValidation_list
  
  for(i in 1:5){
    
    tst = as.character(PT_ls_List[[i]])
    y.tnr<-DT
    y.tnr[tst,c("X1","X2")]<-NA
    
    
    ans <- mmer(cbind(X1,X2)~1,
                random=~vsr(id,Gu=K),
                rcov=~units,
                data=y.tnr,verbose = FALSE) # kinship based
    ans$U$`u:id`$X1 <- as.data.frame(ans$U$`u:id`$X1)
    rownames(ans$U$`u:id`$X1) <- gsub("id","",rownames(ans$U$`u:id`$X1))
    cor_matrix[p,i]<-cor(ans$U$`u:id`$X1[tst,],DT[tst,"X1"], use="complete")
  }
}
summary(cor_matrix)



### Multivariate GBLUP using 10 cycles of 5-fold cross-validation (CV2) ###
#Predicting Grain yield in high nitrogen and well-watered HNW using Grain yield in low nitrogen under rainfed (LNR) 

# create the empty matrix
cor_matrix <- matrix(NA, nrow = 10, ncol = 5)  # Assuming you have 5 folds and you want to repeat the cross-validation for 10 times (you can change this)

for (iter in 1:10) {
  # Set up variables
  y <- DT[,1] # assuming GY is the name of your trait
  n <- length(y) # to calculate the length of the genotypes we are going to analyze
  folds <- sample(1:5, size = n, replace = TRUE) # Based on the size of our population, we randomly split our population into 5 parts

  # Here is the loop for each part of the fifth we have.
  for (i in 1:max(folds)) {
    tst <- which(folds == i) #in this case we are taking part in testing the population
    yNA <- DT
    y.trn[tst] <- NA 
  
ans <- mmer(cbind(X1,X2)~1,
                random=~vs(id,Gu=G),
                rcov=~units,
                data=y.trn,verbose = FALSE) # kinship based
    ans$U$`u:id`$X1 <- as.data.frame(ans$U$`u:id`$X1)
    rownames(ans$U$`u:id`$X1) <- gsub("id","",rownames(ans$U$`u:id`$X1))
    cor_matrix[iter,i]<-cor(ans$U$`u:id`$X1[tst,],DT[tst,"X1"], use="complete")
}
}

# Print the correlation results
print(cor_results)# Print the correlation matrix
cor_matrix








### Multivariate Bayesian Ridge Regression BRR using 10 cycles of 5-fold cross-validation (CV1) ###  
# The script is applicable for both predicting Grain Yield in HNW using grain yield in LNW (and vice-versa) and for predicting grain yield using the five best-correlate traits 


# Here we define our predictors
ETA<-list(list(X=GT,model="BRR"))


# create the empty matrix
cor_matrix <- matrix(NA, nrow = 10, ncol = 5)  # Assuming you have 5 folds and you want to repeat the cross-validation for 10 times (you can change this)


##  CV1  ##

# Repeat the cross-validation process 10 times, you can change if you want to repeat the loop five times, you can just put 1:5
for (iter in 1:10) {
  # Set up variables
  y <- DT[,1] # assuming GY is the name of your trait
  n <- length(y) # to calculate the length of the genotypes we are going to analyze
  folds <- sample(1:5, size = n, replace = TRUE) # Based on the size of our population, we randomly split our population in 5 parts

  # Here is the loop for each part of the fifth we have.
  for (i in 1:max(folds)) {
    tst <- which(folds == i) 
    yNA <- DT
    yNA[tst,] <- NA #we put NAs for this population because we want to predict this part
    #this is the model, we use the phenotype in y, yNA is the vector of the target variables with the NAs for the testing population,
    # ETA is our predictor. nIter is the number of interactions, this is how many times the model has an output and this output is used as input again, this number is usually related to tha size of the population (12k is okay).
    # burnIn is the number of the interaction that the model uses for warming up (5k is okay).
    fm <- Multitrait(y = yNA, ETA = ETA, nIter = 12000, burnIn = 5000)
    yp_ts <- fm$ETAHat # fm is a list which has several parameters. you can find the prediction as yHat
    cor_matrix[iter, i] <- cor(y[tst], yp_ts[tst], use = "complete") # We are interested in making the correlation between our observed values and the prediction of each test population.so we use the function cor for the correlations which should be just for the testing [tst]. we store all the correlations in the matrix cor_matrix
  }
}


# Print the correlation results
print(cor_results)# Print the correlation matrix
cor_matrix



##  CV2  ##

# Repeat the cross-validation process 10 times, you can change if you want to repeat the loop five times, you can just put 1:5
for (iter in 1:10) {
  # Set up variables
  y <- DT[,1] # assuming GY is the name of your trait
  n <- length(y) # to calculate the length of the genotypes we are going to analyze
  folds <- sample(1:5, size = n, replace = TRUE) # Based on the size of our population, we randomly split our population in 5 parts

  # Here is the loop for each part of the fifth we have.
  for (i in 1:max(folds)) {
    tst <- which(folds == i) 
    yNA <- DT
    yNA[tst] <- NA #we put NAs for this population because we want to predict this part
    #this is the model, we use the phenotype in y, yNA is the vector of the target variables with the NAs for the testing population,
    # ETA is our predictor. nIter is the number of interactions, this is how many times the model has an output and this output is used as input again, this number is usually related to tha size of the population (12k is okay).
    # burnIn is the number of the interaction that the model uses for warming up (5k is okay).
    fm <- Multitrait(y = yNA, ETA = ETA, nIter = 12000, burnIn = 5000)
    yp_ts <- fm$ETAHat # fm is a list which has several parameters. you can find the prediction as yHat
    cor_matrix[iter, i] <- cor(y[tst], yp_ts[tst], use = "complete") # We are interested in making the correlation between our observed values and the prediction of each test population.so we use the function cor for the correlations which should be just for the testing [tst]. we store all the correlations in the matrix cor_matrix
  }
}


# Print the correlation results
print(cor_results)# Print the correlation matrix
cor_matrix







### Multivariate SpikeSlab using 10 cycles of 5-fold cross-validation (CV1) ###  
# The script is applicable for both predicting Grain Yield in HNW using grain yield in LNW (and vice-versa) and for predicting grain yield using the five best-correlate traits 


# Here we define our predictors
ETA<-list(list(X=GT,model="SpikeSlab"))


# create the empty matrix
cor_matrix <- matrix(NA, nrow = 10, ncol = 5)  # Assuming you have 5 folds and you want to repeat the cross-validation for 10 times (you can change this)


##  CV1  ##

# Repeat the cross-validation process 10 times, you can change if you want to repeat the loop five times, you can just put 1:5
for (iter in 1:10) {
  # Set up variables
  y <- DT[,1] # assuming GY is the name of your trait
  n <- length(y) # to calculate the length of the genotypes we are going to analyze
  folds <- sample(1:5, size = n, replace = TRUE) # Based on the size of our population, we randomly split our population in 5 parts

  # Here is the loop for each part of the fifth we have.
  for (i in 1:max(folds)) {
    tst <- which(folds == i) 
    yNA <- DT
    yNA[tst,] <- NA #we put NAs for this population because we want to predict this part
    #this is the model, we use the phenotype in y, yNA is the vector of the target variables with the NAs for the testing population,
    # ETA is our predictor. nIter is the number of interactions, this is how many times the model has an output and this output is used as input again, this number is usually related to tha size of the population (12k is okay).
    # burnIn is the number of the interaction that the model uses for warming up (5k is okay).
    fm <- Multitrait(y = yNA, ETA = ETA, nIter = 12000, burnIn = 5000)
    yp_ts <- fm$ETAHat # fm is a list which has several parameters. you can find the prediction as yHat
    cor_matrix[iter, i] <- cor(y[tst], yp_ts[tst], use = "complete") # We are interested in making the correlation between our observed values and the prediction of each test population.so we use the function cor for the correlations which should be just for the testing [tst]. we store all the correlations in the matrix cor_matrix
  }
}


# Print the correlation results
print(cor_results)# Print the correlation matrix
cor_matrix



##  CV2  ##

# Repeat the cross-validation process 10 times, you can change if you want to repeat the loop five times, you can just put 1:5
for (iter in 1:10) {
  # Set up variables
  y <- DT[,1] # assuming GY is the name of your trait
  n <- length(y) # to calculate the length of the genotypes we are going to analyze
  folds <- sample(1:5, size = n, replace = TRUE) # Based on the size of our population, we randomly split our population in 5 parts

  # Here is the loop for each part of the fifth we have.
  for (i in 1:max(folds)) {
    tst <- which(folds == i) 
    yNA <- DT
    yNA[tst] <- NA #we put NAs for this population because we want to predict this part
    #this is the model, we use the phenotype in y, yNA is the vector of the target variables with the NAs for the testing population,
    # ETA is our predictor. nIter is the number of interactions, this is how many times the model has an output and this output is used as input again, this number is usually related to tha size of the population (12k is okay).
    # burnIn is the number of the interaction that the model uses for warming up (5k is okay).
    fm <- Multitrait(y = yNA, ETA = ETA, nIter = 12000, burnIn = 5000)
    yp_ts <- fm$ETAHat # fm is a list which has several parameters. you can find the prediction as yHat
    cor_matrix[iter, i] <- cor(y[tst], yp_ts[tst], use = "complete") # We are interested in making the correlation between our observed values and the prediction of each test population.so we use the function cor for the correlations which should be just for the testing [tst]. we store all the correlations in the matrix cor_matrix
  }
}


# Print the correlation results
print(cor_results)# Print the correlation matrix
cor_matrix








### Multivariate Reproducing Kernel Hilbert Space (RKHS) using 10 cycles of 5-fold cross-validation (CV1) ###  
# The script is applicable for both predicting Grain Yield in HNW using grain yield in LNW (and vice-versa) and for predicting grain yield using the five best-correlate traits 


### DISTANCE MATRIX #############################
X<-scale(GT,center = T,scale = T)
n<-nrow(X)
p<-ncol(X)
D<-(as.matrix(dist(X,method="euclidean"))^2)/p
h<-round(1/median(D[row(D)>col(D)]),2)
h<-h*c(1/5,1,5)

K1=exp(-h[1]*D)
K2=exp(-h[2]*D)
K3=exp(-h[3]*D)

### MODEL FITTING #################################

ETA =  list(list(model='RKHS',K = K1),
            list(model='RKHS',K = K2),
            list(model='RKHS',K = K3))


# create the empty matrix
cor_matrix <- matrix(NA, nrow = 10, ncol = 5)  # Assuming you have 5 folds and you want to repeat the cross-validation for 10 times (you can change this)


##  CV1  ##

# Repeat the cross-validation process 10 times, you can change if you want to repeat the loop five times, you can just put 1:5
for (iter in 1:10) {
  # Set up variables
  y <- DT[,1] # assuming GY is the name of your trait
  n <- length(y) # to calculate the length of the genotypes we are going to analyze
  folds <- sample(1:5, size = n, replace = TRUE) # Based on the size of our population, we randomly split our population in 5 parts

  # Here the loop for each part of the fifth we have.
  for (i in 1:max(folds)) {
    tst <- which(folds == i) 
    yNA <- DT
    yNA[tst,] <- NA #we put NAs for this population because we want to predict this part
    #this is the model, we use the phenotype in y, yNA is the vector of the target variables with the NAs for the testing population,
    # ETA is our predictor. nIter is the number of interactions, this is how many times the model has an output and this output is used as input again, this number is usually related to tha size of the population (12k is okay).
    # burnIn is the number of the interaction that the model uses for warming up (5k is okay).
    fm <- Multitrait(y = yNA, ETA = ETA, nIter = 12000, burnIn = 5000)
    yp_ts <- fm$ETAHat # fm is a list which has several parameters. you can find the prediction as yHat
    cor_matrix[iter, i] <- cor(y[tst], yp_ts[tst], use = "complete") # We are interested in making the correlation between our observed values and the prediction of each test population.so we use the function cor for the correlations which should be just for the testing [tst]. we store all the correlations in the matrix cor_matrix
  }
}


# Print the correlation results
print(cor_results)# Print the correlation matrix
cor_matrix



##  CV2  ##

# Repeat the cross-validation process 10 times, you can change if you want to repeat the loop five times, you can just put 1:5
for (iter in 1:10) {
  # Set up variables
  y <- DT[,1] # assuming GY is the name of your trait
  n <- length(y) # to calculate the length of the genotypes we are going to analyze
  folds <- sample(1:5, size = n, replace = TRUE) # Based on the size of our population, we randomly split our population in 5 parts

  # Here the loop for each part of the fifth we have.
  for (i in 1:max(folds)) {
    tst <- which(folds == i) 
    yNA <- DT
    yNA[tst] <- NA #we put NAs for this population because we want to predict this part
    #this is the model, we use the phenotype in y, yNA is the vector of the target variables with the NAs for the testing population,
    # ETA is our predictor. nIter is the number of interactions, this is how many times the model has an output and this output is used as input again, this number is usually related to tha size of the population (12k is okay).
    # burnIn is the number of the interaction that the model uses for warming up (5k is okay).
    fm <- Multitrait(y = yNA, ETA = ETA, nIter = 12000, burnIn = 5000)
    yp_ts <- fm$ETAHat # fm is a list which has several parameters. you can find the prediction as yHat
    cor_matrix[iter, i] <- cor(y[tst], yp_ts[tst], use = "complete") # We are interested in making the correlation between our observed values and the prediction of each test population.so we use the function cor for the correlations which should be just for the testing [tst]. we store all the correlations in the matrix cor_matrix
  }
}


# Print the correlation results
print(cor_results)# Print the correlation matrix
cor_matrix








### Machine Learning (Random Forrest) using 10 cycles of 5-fold cross-validation (CV1) ###  
# The script is applicable for both predicting Grain Yield in HNW using grain yield in LNW (and vice-versa) and for predicting grain yield using the five best-correlate traits 

# Activate libraries
library(randomForestSRC)
library(dplyr)
library(caret)
library(purrr)
library(BMTME)

#load the Markers and Phenotypes
Markers <- as.matrix(read.table(file="INPUT_SNP_0.05_MAF_IMPUTED.txt"), header=F)
head(Markers)
Pheno <-as.matrix(read.table(file ="ALL_PHENO_FINAL.txt", header=TRUE))
head(Pheno)

# Prepare the data for Random Forest
X <- Markers
Y <- Pheno
Data <- data.frame(wheat.Y, wheat.X)  # Combining phenotypes and markers into one dataset

# Define response variables (traits) and number of records
responses <- c("X1", "X2")

# Cross-validation setup
n_outer_folds <- 5
n_inner_folds <- 5

# Define the tuning values for hyperparameter search
tuning_values <- list(ntree = c(100, 200, 300), mtry = c(80, 100, 120), nodesize = c(3, 6, 9))
all_combinations <- cross(tuning_values)
n_combinations <- length(all_combinations)

# Initialize variable to store the best parameters
best_params <- list(maape = Inf)

# Function to calculate Mean Arctangent Absolute Percentage Error (MAAPE)
maape <- function(observed, predicted) {
  return(mean(atan(abs((observed - predicted) / observed))))
}

# Define the outer cross-validation fold list
PT_ls <- CV.KFold(Data, DataSetID='id', K=n_outer_folds, set_seed=123)$CrossValidation_list

# Random Forest hyperparameter tuning with cross-validation
for (j in 1:n_combinations) {
  cat("Combination:", j, "/", n_combinations, "\n")
  flags <- all_combinations[[j]]  # Access the list element correctly
  
  # Loop over outer cross-validation folds
  for (m in 1:n_outer_folds) {
    Test <- PT_ls[[m]]  # Get the test fold
    
    DataInnerTraining1 <- Data[-Test, ]  # Training data
    DataInnerTesting1 <- Data[Test, ]  # Testing data
    
    # Fit the Random Forest model using current hyperparameter combination
    tuning_model1 <- rfsrc(Multivar(X1, X2) ~ ., data = DataInnerTraining1, 
                           ntree = flags$ntree, mtry = flags$mtry, nodesize = flags$nodesize, splitrule = "mv")  # Use 'mv' for multivariate splitting
    
    # Predict on test data
    predictions1 <- predict(tuning_model1, DataInnerTesting1)
    
    # Calculate MAAPE for each trait
    gyns_maape1 <- maape(DataInnerTesting1$X1, predictions1$regrOutput$X1$predicted)
    gys_maape1 <- maape(DataInnerTesting1$X2, predictions1$regrOutput$X2$predicted)
    
    # Average MAAPE across traits
    maape_total <- mean(c(gyns_maape1, gys_maape1), na.rm = TRUE)
    
    # Update best parameters if this combination gives a lower MAAPE
    if (maape_total < best_params$maape) {
      best_params <- flags
      best_params$maape <- maape_total
    }
  }
  cat("\n")
}

# Fit the final model using the best hyperparameters
# Initialize storage for PAS results
PAS_results <- vector("list", n_outer_folds)

# Perform final cross-validation using the best parameters
for (nrep in 1:10) {
  PT_ls_List <- CV.KFold(Data, DataSetID='id', K=n_outer_folds)$CrossValidation_list
  
  for (p in 1:n_outer_folds) {
    Test <- PT_ls_List[[p]]  # Get the test fold
    
    DataTraining <- Data[-Test, ]  # Training data
    DataTesting <- Data[Test, ]  # Testing data
    
    # Fit the final Random Forest model using the best parameters
    model <- rfsrc(Multivar(X1, X2) ~ ., data=DataTraining, 
                   ntree=best_params$ntree, mtry=best_params$mtry, 
                   nodesize=best_params$nodesize, splitrule=NULL)
    
    # Predict on the test set
    predicted <- predict(model, DataTesting)
    
    # Calculate PAS (correlation between predicted and observed values)
    PAS <- cor(predicted$regrOutput$X1$predicted, DataTesting$X1, use="complete.obs")
    PAS_results[[p]] <- PAS
  }
}

# Print and save the final PAS results
PAS_final <- do.call(c, PAS_results)
summary(PAS_final)

# Write PAS results to a CSV file
write.csv(PAS_final, file="RF_MT_GYS_GYNS_PAS_results.csv")
PAS_final
